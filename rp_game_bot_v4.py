import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler
from telegram.error import TimedOut, NetworkError, BadRequest
import json
from datetime import datetime

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Bot token
TOKEN = "7260525635:AAF63mWkBTYl-p0D01-BfGlSaCsJamT-wi0"

# Admin IDs (–¥–æ–±–∞–≤—å—Ç–µ —Å—é–¥–∞ ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
ADMIN_IDS = [
    # –ù–∞–ø—Ä–∏–º–µ—Ä: 123456789
]

# Store user data
user_data = {}
try:
    with open('user_data.json', 'r') as f:
        user_data = json.load(f)
except FileNotFoundError:
    pass

# Pending jobs (—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π, –æ–∂–∏–¥–∞—é—â–∏—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏)
pending_jobs = {}

# Available jobs
jobs = {
    'like_post': {
        'name': '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫',
        'description': '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫',
        'url': 'https://t.me/your_channel/post',
        'xp': 10,
        'cooldown': 3600,
        'channel_id': '@your_channel',  # ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        'requires_admin_verify': True    # –¢—Ä–µ–±—É–µ—Ç—Å—è –ª–∏ –ø—Ä–æ–≤–µ—Ä–∫–∞ –∞–¥–º–∏–Ω–æ–º
    },
    'share_post': {
        'name': '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è –ø–æ—Å—Ç–æ–º',
        'description': '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –ø–æ—Å—Ç–æ–º —Å –¥—Ä—É–∑—å—è–º–∏',
        'url': 'https://t.me/share/url?url=your_share_link',
        'xp': 15,
        'cooldown': 7200,
        'requires_admin_verify': True
    },
    'subscribe': {
        'name': '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª',
        'description': '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à –∫–∞–Ω–∞–ª',
        'url': 'https://t.me/your_channel',
        'xp': 20,
        'cooldown': 86400,
        'channel_id': '@your_channel',
        'requires_admin_verify': False   # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏
    }
}

def save_user_data():
    with open('user_data.json', 'w') as f:
        json.dump(user_data, f)

async def check_subscription(user_id, channel_id, context):
    try:
        member = await context.bot.get_chat_member(chat_id=channel_id, user_id=user_id)
        return member.status in ['member', 'administrator', 'creator']
    except BadRequest:
        return False

def is_admin(user_id):
    return str(user_id) in map(str, ADMIN_IDS)

async def start(update: Update, context: CallbackContext):
    try:
        user_id = str(update.effective_user.id)
        if user_id not in user_data:
            user_data[user_id] = {
                'xp': 0,
                'completed_jobs': {},
                'rank': '–ù–æ–≤–∏—á–æ–∫'
            }
            save_user_data()
        
        await update.message.reply_text(
            '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ RP –∏–≥—Ä–µ. –ò—Å–ø–æ–ª—å–∑—É–π /job –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—Ç.'
        )
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def get_rank(xp):
    if xp < 100:
        return '–ù–æ–≤–∏—á–æ–∫'
    elif xp < 300:
        return '–û–ø—ã—Ç–Ω—ã–π'
    elif xp < 600:
        return '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª'
    else:
        return '–ú–∞—Å—Ç–µ—Ä'

async def job(update: Update, context: CallbackContext):
    try:
        keyboard = []
        for job_id, job_info in jobs.items():
            keyboard.append([InlineKeyboardButton(
                job_info['name'], 
                callback_data=f'job_{job_id}'
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É:',
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Error in job command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def verify_job(update: Update, context: CallbackContext):
    try:
        if not is_admin(update.effective_user.id):
            await update.message.reply_text("–≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞–º.")
            return

        args = context.args
        if len(args) != 2:
            await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /verify <user_id> <true/false>")
            return

        user_id, verified = args
        verified = verified.lower() == 'true'

        if user_id not in pending_jobs:
            await update.message.reply_text("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        job_data = pending_jobs[user_id]
        job_info = jobs[job_data['job_id']]

        if verified:
            # Add XP and update completion time
            if user_id not in user_data:
                user_data[user_id] = {'xp': 0, 'completed_jobs': {}, 'rank': '–ù–æ–≤–∏—á–æ–∫'}

            user_data[user_id]['xp'] += job_info['xp']
            user_data[user_id]['completed_jobs'][job_data['job_id']] = datetime.now().timestamp()
            new_rank = get_rank(user_data[user_id]['xp'])
            user_data[user_id]['rank'] = new_rank
            save_user_data()

            # Notify user
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚úÖ –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ '{job_info['name']}' –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ –∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ!\n"
                     f"üíé –ü–æ–ª—É—á–µ–Ω–æ: +{job_info['xp']} XP\n"
                     f"üèÜ –í–∞—à —Ä–∞–Ω–≥: {new_rank}\n"
                     f"üìä –í—Å–µ–≥–æ XP: {user_data[user_id]['xp']}"
            )
        else:
            await context.bot.send_message(
                chat_id=user_id,
                text=f"‚ùå –í–∞—à–µ –∑–∞–¥–∞–Ω–∏–µ '{job_info['name']}' –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ.\n"
                     f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ –≤—Å–µ —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è."
            )

        del pending_jobs[user_id]
        await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞.")

    except Exception as e:
        logger.error(f"Error in verify command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏—è.")

async def button_callback(update: Update, context: CallbackContext):
    try:
        query = update.callback_query
        user_id = str(query.from_user.id)
        
        if user_id not in user_data:
            user_data[user_id] = {
                'xp': 0,
                'completed_jobs': {},
                'rank': '–ù–æ–≤–∏—á–æ–∫'
            }
        
        job_id = query.data.replace('job_', '')
        job_info = jobs[job_id]
        
        # Check cooldown
        now = datetime.now().timestamp()
        if job_id in user_data[user_id].get('completed_jobs', {}):
            last_completion = user_data[user_id]['completed_jobs'][job_id]
            if now - last_completion < job_info['cooldown']:
                time_left = int(job_info['cooldown'] - (now - last_completion))
                await query.answer(
                    f'–ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_left // 3600} —á {(time_left % 3600) // 60} –º–∏–Ω –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º',
                    show_alert=True
                )
                return

        # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ —Ç—Ä–µ–±—É–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–¥–º–∏–Ω–æ–º
        if job_info['requires_admin_verify']:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ –æ–∂–∏–¥–∞—é—â–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
            pending_jobs[user_id] = {
                'job_id': job_id,
                'timestamp': now
            }
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            await query.message.reply_text(
                f"üìù –ó–∞–¥–∞–Ω–∏–µ: {job_info['name']}\n"
                f"üîó –°—Å—ã–ª–∫–∞: {job_info['url']}\n\n"
                f"–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è, –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä–∏—Ç –µ–≥–æ –∏ –Ω–∞—á–∏—Å–ª–∏—Ç XP."
            )
            
            # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–æ–≤
            for admin_id in ADMIN_IDS:
                try:
                    await context.bot.send_message(
                        chat_id=admin_id,
                        text=f"üÜï –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É!\n"
                             f"–û—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user_id}\n"
                             f"–ó–∞–¥–∞–Ω–∏–µ: {job_info['name']}\n"
                             f"–î–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É:\n"
                             f"/verify {user_id} true - –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è\n"
                             f"/verify {user_id} false - –¥–ª—è –æ—Ç–∫–∞–∑–∞"
                    )
                except Exception as e:
                    logger.error(f"Failed to notify admin {admin_id}: {e}")
            
        # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ –∫–∞–Ω–∞–ª)
        elif 'channel_id' in job_info:
            is_subscribed = await check_subscription(user_id, job_info['channel_id'], context)
            if is_subscribed:
                user_data[user_id]['xp'] += job_info['xp']
                user_data[user_id]['completed_jobs'][job_id] = now
                new_rank = get_rank(user_data[user_id]['xp'])
                user_data[user_id]['rank'] = new_rank
                save_user_data()
                
                await query.message.reply_text(
                    f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n"
                    f"üíé –ü–æ–ª—É—á–µ–Ω–æ: +{job_info['xp']} XP\n"
                    f"üèÜ –í–∞—à —Ä–∞–Ω–≥: {new_rank}\n"
                    f"üìä –í—Å–µ–≥–æ XP: {user_data[user_id]['xp']}"
                )
            else:
                await query.message.reply_text(
                    f"‚ùå –í—ã –Ω–µ –≤—ã–ø–æ–ª–Ω–∏–ª–∏ —É—Å–ª–æ–≤–∏–µ –∑–∞–¥–∞–Ω–∏—è.\n"
                    f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, {job_info['description']} –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
                )
        
        await query.answer()
        
    except Exception as e:
        logger.error(f"Error in button callback: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

async def stats(update: Update, context: CallbackContext):
    try:
        user_id = str(update.effective_user.id)
        if user_id not in user_data:
            await update.message.reply_text('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è!')
            return
        
        user_stats = user_data[user_id]
        await update.message.reply_text(
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–†–∞–Ω–≥: {user_stats['rank']}\n"
            f"XP: {user_stats['xp']}\n"
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {len(user_stats.get('completed_jobs', {}))}"
        )
    except Exception as e:
        logger.error(f"Error in stats command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    # Initialize bot with increased timeout
    application = Application.builder().token(TOKEN).connect_timeout(30.0).read_timeout(30.0).write_timeout(30.0).build()
    
    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("job", job))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler("verify", verify_job))
    application.add_handler(CallbackQueryHandler(button_callback))
    
    # Start the bot
    print("Starting bot...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
