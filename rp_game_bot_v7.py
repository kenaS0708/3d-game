import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, filters
import json
import random
import asyncio
from datetime import datetime, timedelta
import time


# –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Ñ–∞–π–ª–∞
def load_factions_data():
    try:
        with open('factions_data.json', 'r', encoding='utf-8') as f:
            return json.load(f)
    except FileNotFoundError:
        return {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ —Ñ—Ä–∞–∫—Ü–∏—è—Ö –≤ —Ñ–∞–π–ª
def save_factions_data():
    with open('factions_data.json', 'w', encoding='utf-8') as f:
        json.dump(factions, f, ensure_ascii=False, indent=4)

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
factions = load_factions_data()


task_timers = {}
# –°–ø–∏—Å–æ–∫ –ø–∞—Ü–∏–µ–Ω—Ç–æ–≤
patients = [
    {"name": "–ü–∞—Ü–∏–µ–Ω—Ç", "problem": "—Å–ª–æ–º–∞–ª —Ä—É–∫—É", "solution": "–Ω–∞–ª–æ–∂–∏—Ç—å –≥–∏–ø—Å", "difficulty": "—Å–ª–æ–∂–Ω—ã–π"},
    {"name": "–ü–∞—Ü–∏–µ–Ω—Ç", "problem": "–æ—Ç–∫—Ä—ã—Ç–∞—è —Ä–∞–Ω–∞ –Ω–∞ –Ω–æ–≥–µ", "solution": "–ø–µ—Ä–µ–≤—è–∑–∞—Ç—å —Ä–∞–Ω—É", "difficulty": "—Å–ª–æ–∂–Ω—ã–π"},
    {"name": "–ü–∞—Ü–∏–µ–Ω—Ç", "problem": "–ø–µ—Ä–µ–ª–æ–º —Ä–µ–±—Ä–∞", "solution": "–Ω–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–∫—Å–∏—Ä—É—é—â—É—é –ø–æ–≤—è–∑–∫—É", "difficulty": "—Å–ª–æ–∂–Ω—ã–π"},
    {"name": "–ü–∞—Ü–∏–µ–Ω—Ç", "problem": "–æ–±–º–æ—Ä–æ–∫", "solution": "–¥–∞—Ç—å –ø–æ–Ω—é—Ö–∞—Ç—å –Ω–∞—à–∞—Ç—ã—Ä–Ω—ã–π —Å–ø–∏—Ä—Ç", "difficulty": "—Å–ª–æ–∂–Ω—ã–π"},
    {"name": "–ü–∞—Ü–∏–µ–Ω—Ç", "problem": "—Å–∏–ª—å–Ω—ã–π –æ–∂–æ–≥ —Ä—É–∫–∏", "solution": "–Ω–∞–Ω–µ—Å—Ç–∏ –ø—Ä–æ—Ç–∏–≤–æ–æ–∂–æ–≥–æ–≤—É—é –º–∞–∑—å", "difficulty": "—Å–ª–æ–∂–Ω—ã–π"},
    {"name": "–ü–∞—Ü–∏–µ–Ω—Ç", "problem": "–∫–∞—à–µ–ª—å", "solution": "–¥–∞—Ç—å —Å–∏—Ä–æ–ø –æ—Ç –∫–∞—à–ª—è", "difficulty": "–ª–µ–≥–∫–∏–π"},
    {"name": "–ü–∞—Ü–∏–µ–Ω—Ç", "problem": "–Ω–∞—Å–º–æ—Ä–∫", "solution": "–¥–∞—Ç—å –∫–∞–ø–ª–∏ –¥–ª—è –Ω–æ—Å–∞", "difficulty": "–ª–µ–≥–∫–∏–π"},
    {"name": "–ü–∞—Ü–∏–µ–Ω—Ç", "problem": "–ø–æ—Ä–µ–∑ –Ω–∞ –ø–∞–ª—å—Ü–µ", "solution": "–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–Ω—Ç–∏—Å–µ–ø—Ç–∏–∫–æ–º –∏ –∑–∞–∫–ª–µ–∏—Ç—å –ø–ª–∞—Å—Ç—ã—Ä–µ–º", "difficulty": "–ª–µ–≥–∫–∏–π"},
    {"name": "–ü–∞—Ü–∏–µ–Ω—Ç", "problem": "–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å", "solution": "–¥–∞—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É –∞–Ω–∞–ª—å–≥–∏–Ω–∞", "difficulty": "–ª–µ–≥–∫–∏–π"},
    {"name": "–ü–∞—Ü–∏–µ–Ω—Ç", "problem": "–ª–µ–≥–∫–∞—è –ª–∏—Ö–æ—Ä–∞–¥–∫–∞", "solution": "–¥–∞—Ç—å –∂–∞—Ä–æ–ø–æ–Ω–∏–∂–∞—é—â–µ–µ", "difficulty": "–ª–µ–≥–∫–∏–π"}
]

laws = [
    {"name": "–ó–∞–∫–æ–Ω", "law": "–í–µ—Å—Ç–∏ —Å–µ–±—è –∫—É–ª—å—Ç—É—Ä–Ω–æ –ø—Ä–∏ –æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–∫–∞–º–∏,—Ç–æ –µ—Å—Ç—å –Ω–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–µ –Ω–æ—Ä–º–∞—Ç–∏–≤–Ω—É—é –ª–µ–∫—Å–∏–∫—É ( –º—É—Ç 5 –º–∏–Ω—É—Ç).", "number": "1.1", "difficulty": "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã"},
    {"name": "–ó–∞–∫–æ–Ω", "law": "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è –ø—Ä–∏ –æ–±—â–µ–Ω–∏–µ —Å –∏–≥—Ä–æ–∫–∞–º–∏ ( –º—É—Ç 15 –º–∏–Ω—É—Ç).", "number": "1.2", "difficulty": "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã"},
    {"name": "–ó–∞–∫–æ–Ω", "law": "–ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏–µ —Ä–æ–¥—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤ –∏–ª–∏ —Ä–∞—Å–∏—Å—Ç—Å–∫–∏–µ –≤—ã—Å–∫–∞–∑—ã–≤–∞–Ω–∏—è (1 –≤—ã–≥–æ–≤–æ—Ä –∏ –º—É—Ç –Ω–∞ 30 –º–∏–Ω—É—Ç)", "number": "1.3", "difficulty": "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –Ω–æ—Ä–º—ã"},
    {"name": "–ó–∞–∫–æ–Ω", "law": "–ó–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è —Å–∫–∏–¥—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –≥–∏—Ñ–∫–∏ –∏ —Å—Ç–∏–∫–µ—Ä—ã —Å –æ—Å–∫–æ—Ä–±–ª–µ–Ω–∏—è–º–∏ ( –º—É—Ç –Ω–∞ 20 –º–∏–Ω—É—Ç)", "number": "2.1", "difficulty": "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –≥–∏—Ñ–∫–∏ –∏ —Å—Ç–∏–∫–µ—Ä—ã"},
    {"name": "–ó–∞–∫–æ–Ω", "law": "–ó–∞–ø—Ä–µ—â–∞–µ—Ç—Å—è —Å–∫–∏–¥—ã–≤–∞—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –≥–∏—Ñ–∫–∏ –∏ —Å—Ç–∏–∫–µ—Ä—ã —Å–æ–¥–µ—Ä–∂–∞—é—â–∏–µ –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ —Å—Ü–µ–Ω—ã ( 1 –≤—ã–≥–æ–≤–æ—Ä )", "number": "2.2", "difficulty": "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –≥–∏—Ñ–∫–∏ –∏ —Å—Ç–∏–∫–µ—Ä—ã"},
    {"name": "–ó–∞–∫–æ–Ω", "law": "–ó–∞–ø—Ä–µ—â–µ–Ω–Ω–æ —Å–∫–∏–¥—ã–≤–∞—Ç—å –≤–∏–¥–µ–æ —Å –¥–µ—Ç—Å–∫–æ–π –ø–æ—Ä–Ω–æ–≥—Ä–∞—Ñ–∏–µ–π ( –º—É—Ç –Ω–∞–≤—Å–µ–≥–¥–∞)", "number": "2.3", "difficulty": "–§–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏, –≥–∏—Ñ–∫–∏ –∏ —Å—Ç–∏–∫–µ—Ä—ã"},
    {"name": "–ó–∞–∫–æ–Ω", "law": "–ù–µ —É–º–µ–Ω–∏–µ –¥–µ–ª–∞—Ç—å —Ä–ø –æ—Ç—ã–≥—Ä–æ–≤–∫–∏ –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ ( –¥–∞—ë—Ç—Å—è –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –∏–≥—Ä–æ–∫—É,–µ—Å–ª–∏ –∏—Ö –Ω–∞–∫–æ–ø–∏—Ç—å—Å—è 3,—Ç–æ –≤–∞–º –±—É–¥–µ—Ç –æ—Ç–∫–∞–∑–∞–Ω–Ω–æ).", "number": "3.1", "difficulty": "–†–ø –æ—Ç—ã–≥—Ä–æ–≤–∫–∞"},
    {"name": "–ó–∞–∫–æ–Ω", "law": "–ù–µ –∑–Ω–∞–Ω–∏–µ —Ç–µ—Ä–º–∏–Ω–æ–≤ –ø—Ä–∏ –ø–æ—Å—Ç—É–ø–ª–µ–Ω–∏–∏ –≤–æ —Ñ—Ä–∞–∫—Ü–∏—é ( –¥–∞—ë—Ç—Å—è 1 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–∞–∫–æ–ø–∏–≤ 3 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –≤–∞–º –æ—Ç–∫–∞–∂—É—Ç).", "number": "3.2", "difficulty": "–†–ø –æ—Ç—ã–≥—Ä–æ–≤–∫–∞"},
    {"name": "–ó–∞–∫–æ–Ω", "law": "–û—Ä—Ñ–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Ä–∞–∑—Ä–µ—à–µ–Ω—ã", "number": "3.3", "difficulty": "–†–ø –æ—Ç—ã–≥—Ä–æ–≤–∫–∞"},
    {"name": "–ó–∞–∫–æ–Ω", "law": "–õ–æ–∂–Ω—ã–µ –∂–∞–ª–æ–±—ã –Ω–∞ –∏–≥—Ä–æ–∫–æ–≤ –±—É–¥—É—Ç –∫–∞—Ä–∞—Ç—å—Å—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–µ–Ω–∏–µ–º –∏ –≤–∞–º –±—É–¥–µ—Ç –¥–∞–Ω 1 –≤—ã–≥–æ–≤–æ—Ä.", "number": "4.1", "difficulty": "–°—É–¥"},
    {"name": "–ó–∞–∫–æ–Ω", "law": "–í–æ –≤—Ä–µ–º—è –æ–±—â–µ–Ω–∏—è –¥–≤—É—Ö —Å—Ç–æ—Ä–æ–Ω –Ω–µ–ª—å–∑—è —Å–ø–∞–º–∏—Ç—å –∏ –ø–∏—Å–∞—Ç—å –ª–∏—à–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–Ω–∞–∫–∞–∑–∞–Ω–∏—è 1 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –µ—Å–ª–∏ –∏—Ö –Ω–∞–∫–æ–ø–∏—Ç—å—Å—è 3 —à—Ç—É–∫–∏,—Ç–æ –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç–µ –¥–µ–ª–æ).", "number": "4.2", "difficulty": "–°—É–¥"},
    {"name": "–ó–∞–∫–æ–Ω", "law": "–°–ø–æ—Ä—ã —Å —Å—É–¥—å—ë–π —Å—Ç—Ä–æ–≥–æ –∑–∞–ø—Ä–µ—â–µ–Ω—ã ( –Ω–∞–∫–∞–∑–∞–Ω–∏—è 1 –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ,–µ—Å–ª–∏ –∏—Ö –Ω–∞–∫–æ–ø–∏—Ç—å—Å—è 3 —à—Ç—É–∫–∏ –≤—ã –ø—Ä–æ–∏–≥—Ä–∞–µ—Ç–µ –¥–µ–ª–æ –∏ –≤–∞–º –±—É–¥–µ—Ç –¥–∞–Ω –ú—É—Ç –Ω–∞ 5 –º–∏–Ω—É—Ç).", "number": "4.3", "difficulty": "–°—É–¥"},
]

law = laws[0]


# –û—Ä—É–∂–∏–µ –∏ –∏—Ö —Å—Ç–æ–∏–º–æ—Å—Ç—å
weapons = {
    "–®—Ç—É—Ä–º–æ–≤–∞—è –≤–∏–Ω—Ç–æ–≤–∫–∞": 150,
    "–ü–∏—Å—Ç–æ–ª–µ—Ç": 40,
    "–ì—Ä–∞–Ω–∞—Ç–æ–º—ë—Ç": 100,
    "–°–Ω–∞–π–ø–µ—Ä—Å–∫–∞—è –≤–∏–Ω—Ç–æ–≤–∫–∞": 200,
    "–ü—É–ª–µ–º—ë—Ç": 180,
    "–†—É—á–Ω–∞—è –≥—Ä–∞–Ω–∞—Ç–∞": 30,
    "–ú–µ—á (–¥–ª—è –æ—Ñ–∏—Ü–µ—Ä–æ–≤)": 50,
    "–î—Ä–æ–±–æ–≤–∏–∫": 120,
    "–©–∏—Ç (—Ç–∞–∫—Ç–∏—á–µ—Å–∫–∏–π)": 70,
    "–ë–æ–µ–≤—ã–µ –Ω–æ–∂–∏": 20,
}

last_law_time = {}

# –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –ø–æ –≤—Ä–µ–º–µ–Ω–∏
last_patient_time = {}

# –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏
logging.basicConfig(

    level=logging.WARNING
)
logger = logging.getLogger(__name__)

# Bot token
TOKEN = "7260525635:AAF63mWkBTYl-p0D01-BfGlSaCsJamT-wi0"

# Store user data
user_data = {}
try:
    with open('user_data.json', 'r') as f:
        user_data = json.load(f)
except FileNotFoundError:
    pass

# –•—Ä–∞–Ω–∏–ª–∏—â–µ —Å–æ–æ–±—â–µ–Ω–∏–π
message_counts = {}


# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ñ–∞–π–ª–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
try:
    with open('message_counts.json', 'r') as f:
        message_counts = json.load(f)
except FileNotFoundError:
    pass


# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
def save_message_counts():
    with open('message_counts.json', 'w') as f:
        json.dump(message_counts, f)


# –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
active_jobs = {}

# –î–∞–Ω–Ω—ã–µ —Ñ—Ä–∞–∫—Ü–∏–π
factions = {
    'army': {
        'name': 'ü™ñ–ê—Ä–º–∏—è',
        'verify_code': '578921',
        'rank_jobs': [
            {"name": "–°–æ–±—Ä–∞—Ç—å –º–µ—Ç–∞–ª–ª", "callback_data": "start_task_metal"},
            {"name": "–ö—Ä–∞—Ñ—Ç –æ—Ä—É–∂–∏—è", "callback_data": "start_task_craft"},
            {"name": "–ò–¥—Ç–∏ –≤ –±–æ–π", "callback_data": "start_task_battle"}
        ]
    },
    'hospital': {
        'name': 'üíä–ë–æ–ª—å–Ω–∏—Ü–∞',
        'verify_code': '435889',
        'rank_jobs': [
            {"name": "–ü—Ä–∏–Ω—è—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç–∞", "callback_data": "rank_task_patient"}
        ]
    },
    'court': {
        'name': 'üßë‚Äç‚öñÔ∏è–°—É–¥',
        'verify_code': '662730',
        'rank_jobs': [
            {"name": "–í—ã–∏–≥—Ä–∞—Ç—å –¥–µ–ª–æ", "callback_data": "rank_task_case"}
        ]
    }
}

# Available jobs
jobs = {
    'task_1': {
        'name': '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ ‚Ññ1',
        'url': "https://lyl.su/gbtv",
        'xp': 5,
        'cooldown': 300,
        'verify_code': '456327'  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
    },
    'task_2': {
        'name': '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ ‚Ññ2',
        'url': "https://lyl.su/DcI6",
        'xp': 10,
        'cooldown': 600,
        'verify_code': '652833'  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
    },
    'task_3': {
        'name': '–í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ ‚Ññ3',
        'url': "https://lyl.su/CVDz",
        'xp': 15,
        'cooldown': 900,
        'verify_code': '917306'  # –§–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–¥
    }
}

def save_user_data():
    with open('user_data.json', 'w') as f:
        json.dump(user_data, f, ensure_ascii=False, indent=4)

async def start(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    if user_id not in user_data:
        user_data[user_id] = {
            'xp': 0,
            'completed_jobs': {},
            'rank': '–ù–æ–≤–∏—á–æ–∫',
            'faction': None
        }
        save_user_data()

    keyboard = []
    if user_data[user_id]['faction']:
        keyboard = [
            [InlineKeyboardButton("üìã –†–∞–±–æ—Ç–∞ –≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏", callback_data="work_faction")],
            [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –∏–∑ —Ñ—Ä–∞–∫—Ü–∏–∏", callback_data="leave_faction")],
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="show_jobs")]
        ]
    else:
        keyboard = [
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="show_jobs")],
            [InlineKeyboardButton("üèõ –í—Ö–æ–¥ –≤–æ —Ñ—Ä–∞–∫—Ü–∏—é", callback_data="enter_faction")]
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ RP –∏–≥—Ä–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:',
        reply_markup=reply_markup
    )


def get_rank(xp):
    if xp < 100:
        return '–ù–æ–≤–∏—á–æ–∫'
    elif xp < 300:
        return '–û–ø—ã—Ç–Ω—ã–π'
    elif xp < 600:
        return '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª'
    else:
        return '–ú–∞—Å—Ç–µ—Ä'

async def enter_faction(update: Update, context: CallbackContext):
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("ü™ñ–ê—Ä–º–∏—è", callback_data="faction_army")],
        [InlineKeyboardButton("üíä–ë–æ–ª—å–Ω–∏—Ü–∞", callback_data="faction_hospital")],
        [InlineKeyboardButton("üßë‚Äç‚öñÔ∏è–°—É–¥", callback_data="faction_court")]
    ]

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text('–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:', reply_markup=reply_markup)
    await query.answer()

async def join_faction(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = str(query.from_user.id)
    faction_id = query.data.replace('faction_', '')
    faction_info = factions[faction_id]

    await query.message.reply_text(
        f"üõ°Ô∏è –í—ã –≤—ã–±—Ä–∞–ª–∏ —Ñ—Ä–∞–∫—Ü–∏—é: {faction_info['name']}\n\n–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è."
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–∂–∏–¥–∞–µ–º—É—é —Ñ—Ä–∞–∫—Ü–∏—é –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_data[user_id]['pending_faction'] = faction_id
    save_user_data()
    await query.answer()

async def rank_jobs(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = str(query.from_user.id)
    faction_id = user_data[user_id].get('faction')

    if not faction_id:
        await query.message.reply_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏.")
        await query.answer()
        return

    faction_info = factions.get(faction_id)
    if faction_info:
        rank_jobs = faction_info.get('rank_jobs', [])

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –∑–∞–¥–∞–Ω–∏–π
        keyboard = [
            [InlineKeyboardButton(job['name'], callback_data=job['callback_data'])] for job in rank_jobs
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –ø–æ–≤—ã—à–µ–Ω–∏—è —Ä–∞–Ω–≥–∞:", reply_markup=reply_markup)
        await query.answer()



async def start_task_metal(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    message = update.message or update.callback_query.message

    if user_id not in user_data:
        user_data[user_id] = {"rank": 1, "metal": 0, "crafted_weapons": [], "xp": 0}

    if "metal" not in user_data[user_id]:
        user_data[user_id]["metal"] = 0

    if user_id in task_timers and datetime.now() < task_timers[user_id]:
        remaining_time = task_timers[user_id] - datetime.now()
        minutes, seconds = divmod(remaining_time.seconds, 60)
        await message.reply_text(f"‚è≥ –í—ã —É—Å—Ç–∞–ª–∏. –û—Ç–¥–æ—Ö–Ω–∏—Ç–µ {minutes} –º–∏–Ω—É—Ç {seconds} —Å–µ–∫—É–Ω–¥.")
        return

    await message.reply_text("‚õè –í—ã —Å–æ–±–∏—Ä–∞–µ—Ç–µ –º–µ—Ç–∞–ª–ª... –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
    await asyncio.sleep(10)

    gathered_metal = random.randint(99, 100)
    user_data[user_id]["metal"] += gathered_metal

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–±–æ—Ä–∞ –º–µ—Ç–∞–ª–ª–∞
    save_user_data()

    await message.reply_text(f"‚úÖ –í—ã —Å–æ–±—Ä–∞–ª–∏ {gathered_metal} –µ–¥–∏–Ω–∏—Ü –º–µ—Ç–∞–ª–ª–∞. –í—Å–µ–≥–æ: {user_data[user_id]['metal']}.")

    if user_data[user_id]["metal"] >= 100:
        user_data[user_id]["rank"] = 2
        await message.reply_text("üéâ –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–∞–Ω–≥–∞! –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–µ–Ω –∫—Ä–∞—Ñ—Ç –æ—Ä—É–∂–∏—è.")

        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞ –æ—Ä—É–∂–∏—è –≤ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π —Ñ—Ä–∞–∫—Ü–∏–∏
        faction_id = user_data[user_id].get('faction')
        if faction_id:
            faction_info = factions.get(faction_id)
            if faction_info:
                rank_jobs = faction_info.get('rank_jobs', [])
                rank_jobs.append({
                    'name': '–ö—Ä–∞—Ñ—Ç –æ—Ä—É–∂–∏—è',
                    'callback_data': 'start_task_craft'  # –£–Ω–∏–∫–∞–ª—å–Ω—ã–π callback –¥–ª—è —ç—Ç–æ–π –∫–Ω–æ–ø–∫–∏
                })
                faction_info['rank_jobs'] = rank_jobs
                save_factions_data()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ —Ñ–∞–π–ª

    task_timers[user_id] = datetime.now() + timedelta(seconds=10)

async def start_task_craft(update: Update, context: CallbackContext):
    query = update.callback_query  # –ü–æ–ª—É—á–∞–µ–º callback_query
    user_id = str(query.from_user.id)

    if user_id not in user_data or user_data[user_id]["rank"] != 2:
        await query.message.reply_text("‚ùå –≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ –Ω–∞ —Ç–µ–∫—É—â–µ–º —Ä–∞–Ω–≥–µ.")
        return

    keyboard = [[InlineKeyboardButton(weapon, callback_data=f"craft_{weapon}")] for weapon in weapons.keys()]
    reply_markup = InlineKeyboardMarkup(keyboard)

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º query.message, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ callback, –∞ –Ω–µ –æ–±—ã—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await query.message.reply_text("üîß –í—ã–±–µ—Ä–∏—Ç–µ –æ—Ä—É–∂–∏–µ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞:", reply_markup=reply_markup)

async def craft_weapon(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = str(query.from_user.id)
    weapon = query.data.split("craft_")[1]

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –æ—Ä—É–∂–∏–µ –≤ —Å–ø–∏—Å–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ–≥–æ
    if weapon not in weapons:
        await query.answer("‚ùå –û—Ä—É–∂–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ –æ—Ä—É–∂–∏–µ —É–∂–µ —Å–∫—Ä–∞—Ñ—á–µ–Ω–æ
    if weapon in user_data[user_id].get("crafted_weapons", []):
        await query.message.reply_text(f"‚ùå –í—ã —É–∂–µ —Å–∫—Ä–∞—Ñ—Ç–∏–ª–∏ {weapon}.")
        await query.answer()
        return

    cost = weapons[weapon]
    if user_data[user_id]["metal"] < cost:
        await query.message.reply_text(
            f"‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–µ—Ç–∞–ª–ª–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è {weapon}. –ù—É–∂–Ω–æ: {cost}, –µ—Å—Ç—å: {user_data[user_id]['metal']}."
        )
        await query.answer()
        return

    # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –∫–ª—é—á 'crafted_weapons' —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    if "crafted_weapons" not in user_data[user_id]:
        user_data[user_id]["crafted_weapons"] = []

    # –°–ø–∏—Å—ã–≤–∞–µ–º –º–µ—Ç–∞–ª–ª –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ä—É–∂–∏–µ –≤ —Å–ø–∏—Å–æ–∫
    user_data[user_id]["metal"] -= cost
    user_data[user_id]["crafted_weapons"].append(weapon)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ä—É–∂–∏—è
    save_user_data()

    await query.message.reply_text(
        f"‚úÖ –í—ã —Å–æ–∑–¥–∞–ª–∏ {weapon}! –û—Å—Ç–∞—Ç–æ–∫ –º–µ—Ç–∞–ª–ª–∞: {user_data[user_id]['metal']}."
    )

    # –ï—Å–ª–∏ –≤—Å–µ –æ—Ä—É–∂–∏–µ —Å–∫—Ä–∞—Ñ—á–µ–Ω–æ, –ø–æ–≤—ã—à–∞–µ–º —Ä–∞–Ω–≥
    if len(user_data[user_id]["crafted_weapons"]) == len(weapons):
        user_data[user_id]["rank"] = 3
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Ä–∞–Ω–≥–∞
        save_user_data()
        await query.message.reply_text(
            "üéâ –í—Å–µ –æ—Ä—É–∂–∏–µ —Å–∫—Ä–∞—Ñ—á–µ–Ω–æ! –í—ã –¥–æ—Å—Ç–∏–≥–ª–∏ —Ç—Ä–µ—Ç—å–µ–≥–æ —Ä–∞–Ω–≥–∞. –¢–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω–æ –∑–∞–¥–∞–Ω–∏–µ '–ò–¥—Ç–∏ –≤ –±–æ–π'."
        )

    await query.answer()


async def start_task_battle(update: Update, context: CallbackContext):
    query = update.callback_query  # –ü–æ–ª—É—á–∞–µ–º callback_query
    user_id = str(query.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –¥–æ—Å—Ç—É–ø–Ω–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ
    if user_id not in user_data or user_data[user_id]["rank"] != 3:
        await query.message.reply_text("‚ùå –≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ —Å —Ç—Ä–µ—Ç—å–µ–≥–æ —Ä–∞–Ω–≥–∞.")
        await query.answer()
        return

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º query.message –¥–ª—è –æ—Ç–≤–µ—Ç–∞
    await query.message.reply_text("‚öîÔ∏è –í—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏—Å—å –≤ –±–æ–π! –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω—ã–π —Å—Ü–µ–Ω–∞—Ä–∏–π –±—É–¥–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω –ø–æ–∑–∂–µ.")
    await query.answer()


async def rank_task_patient(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = str(query.from_user.id)
    current_time = time.time()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è
    if user_id in last_patient_time and current_time - last_patient_time[user_id] < 10:
        remaining_time = int(10 - (current_time - last_patient_time[user_id]))
        await query.message.reply_text(
            f"‚è≥ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ {remaining_time} —Å–µ–∫—É–Ω–¥."
        )
        await query.answer()
        return

    # –°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä –ø–∞—Ü–∏–µ–Ω—Ç–∞
    patient = random.choice(patients)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    context.user_data["current_patient"] = patient
    last_patient_time[user_id] = current_time

    await query.message.reply_text(
        f"–°–µ–π—á–∞—Å –∫ –≤–∞–º –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å –ø–∞—Ü–∏–µ–Ω—Ç—ã —Å —Ä–∞–∑–Ω—ã–º–∏ –ø—Ä–æ–±–ª–µ–º–∞–º–∏, –∫–æ—Ç–æ—Ä—ã—Ö –Ω—É–∂–Ω–æ –æ–±—Å–ª—É–∂–∏—Ç—å.\n–û–±—Å–ª—É–∂–∏–≤–∞—Ç—å –Ω—É–∂–Ω–æ —Å—Ç—Ä–æ–≥–æ –ø–æ –ø—Ä–∞–≤–∏–ª–∞–º!\n–í–æ—Ç —Å–ø–∏—Å–æ–∫ –ø—Ä–∞–≤–∏–ª:\n"
    )

    await query.message.reply_text(
        f"–ï—Å–ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç –ø—Ä–∏—à–µ–ª —Å –ø—Ä–æ–±–ª–µ–º–æ–π '—Å–ª–æ–º–∞–ª —Ä—É–∫—É',\n—Ç–æ –Ω—É–∂–Ω–æ '`–Ω–∞–ª–æ–∂–∏—Ç—å –≥–∏–ø—Å`'\n\n"
        f"'–æ—Ç–∫—Ä—ã—Ç–∞—è —Ä–∞–Ω–∞ –Ω–∞ –Ω–æ–≥–µ' - '`–ø–µ—Ä–µ–≤—è–∑–∞—Ç—å —Ä–∞–Ω—É`'\n"
        f"'–ø–µ—Ä–µ–ª–æ–º —Ä–µ–±—Ä–∞' - '`–Ω–∞–ª–æ–∂–∏—Ç—å —Ñ–∏–∫—Å–∏—Ä—É—é—â—É—é –ø–æ–≤—è–∑–∫—É`'\n"
        f"'–æ–±–º–æ—Ä–æ–∫' - '`–¥–∞—Ç—å –ø–æ–Ω—é—Ö–∞—Ç—å –Ω–∞—à–∞—Ç—ã—Ä–Ω—ã–π —Å–ø–∏—Ä—Ç`'\n"
        f"'—Å–∏–ª—å–Ω—ã–π –æ–∂–æ–≥ —Ä—É–∫–∏' - '`–Ω–∞–Ω–µ—Å—Ç–∏ –ø—Ä–æ—Ç–∏–≤–æ–æ–∂–æ–≥–æ–≤—É—é –º–∞–∑—å`'\n"
        f"'–∫–∞—à–µ–ª—å' - '`–¥–∞—Ç—å —Å–∏—Ä–æ–ø –æ—Ç –∫–∞—à–ª—è`'\n"
        f"'–Ω–∞—Å–º–æ—Ä–∫' - '`–¥–∞—Ç—å –∫–∞–ø–ª–∏ –¥–ª—è –Ω–æ—Å–∞`'\n"
        f"'–ø–æ—Ä–µ–∑ –Ω–∞ –ø–∞–ª—å—Ü–µ' - '`–æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∞–Ω—Ç–∏—Å–µ–ø—Ç–∏–∫–æ–º –∏ –∑–∞–∫–ª–µ–∏—Ç—å –ø–ª–∞—Å—Ç—ã—Ä–µ–º`'\n"
        f"'–≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å' - '`–¥–∞—Ç—å —Ç–∞–±–ª–µ—Ç–∫—É –∞–Ω–∞–ª—å–≥–∏–Ω–∞`'\n"
        f"'–ª–µ–≥–∫–∞—è –ª–∏—Ö–æ—Ä–∞–¥–∫–∞' - '`–¥–∞—Ç—å –∂–∞—Ä–æ–ø–æ–Ω–∏–∂–∞—é—â–µ–µ`'", parse_mode="Markdown"
    )

    await query.message.reply_text(
        f"ü©∫ {patient['name']} –ø—Ä–∏—à–µ–ª —Å –ø—Ä–æ–±–ª–µ–º–æ–π: {patient['problem']}.\n\n"
        f"–ß—Ç–æ –≤—ã –±—É–¥–µ—Ç–µ –¥–µ–ª–∞—Ç—å, —á—Ç–æ–±—ã –µ–≥–æ –≤—ã–ª–µ—á–∏—Ç—å?"
    )
    await query.answer()

async def treat_patient(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    patient = context.user_data.get("current_patient")

    if not patient:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å —Å–µ–π—á–∞—Å –Ω–µ—Ç –ø–∞—Ü–∏–µ–Ω—Ç–∞ –¥–ª—è –ª–µ—á–µ–Ω–∏—è.")
        return

    # –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_answer = update.message.text.strip().lower()
    correct_solution = patient["solution"].lower()

    if user_answer == correct_solution:
        # –£—Å–ø–µ—à–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ
        user_data[user_id]['xp'] += 5
        user_data[user_id]['rank'] = get_rank(user_data[user_id]['xp'])
        save_user_data()

        await update.message.reply_text(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–ª–µ—á–∏–ª–∏ –ø–∞—Ü–∏–µ–Ω—Ç–∞! –ù–∞—á–∏—Å–ª–µ–Ω–æ 5 XP.")
        context.user_data["current_patient"] = None
    else:
        # –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –ª–µ—á–µ–Ω–∏–µ
        await update.message.reply_text(
            f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ! –ü–∞—Ü–∏–µ–Ω—Ç –æ—Å—Ç–∞–ª—Å—è —Å —Ç–æ–π –∂–µ –ø—Ä–æ–±–ª–µ–º–æ–π. –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Ä–µ—à–µ–Ω–∏–µ: {correct_solution}."
        )


def check_cooldown(user_id, last_time, cooldown=20):
    current_time = time.time()
    if user_id in last_time and current_time - last_time[user_id] < cooldown:
        return int(cooldown - (current_time - last_time[user_id]))
    return 0


async def rank_task_case(update: Update, context: CallbackContext):
    query = update.callback_query
    if query is None:  # –ï—Å–ª–∏ –≤—ã–∑–æ–≤ –Ω–µ –∏–∑ CallbackQuery, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
        return

    user_id = str(query.from_user.id)
    current_time = time.time()

    if user_id in last_law_time and current_time - last_law_time[user_id] < 20:
        remaining_time = int(20 - (current_time - last_law_time[user_id]))
        await query.message.reply_text(
            f"‚è≥ –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏–Ω—è—Ç—å —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞ —á–µ—Ä–µ–∑ {remaining_time} —Å–µ–∫—É–Ω–¥."
        )
        await query.answer()
        return

    law = random.choice(laws)
    context.user_data["current_law"] = law
    last_law_time[user_id] = current_time

    await query.message.reply_text(
        f"‚öñÔ∏è {law['name']} '{law['law']}', –∫–∞–∫–∞—è —ç—Ç–æ —Å—Ç–∞—Ç—å—è –£–ö –î–¢?"
    )
    await query.answer()

async def handle_user_answer(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)

    if "current_law" not in context.user_data:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å —Å–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")
        return

    law = context.user_data.pop("current_law")
    user_answer = update.message.text.strip().lower()
    correct_solution = law["number"].lower()

    if user_answer == correct_solution:
        user_data[user_id]['xp'] += 5
        user_data[user_id]['rank'] = get_rank(user_data[user_id]['xp'])
        save_user_data()
        await update.message.reply_text("‚úÖ –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –≤—ã—É—á–∏–ª–∏ —Å—Ç–∞—Ç—å—é! –ù–∞—á–∏—Å–ª–µ–Ω–æ 5 XP.")
    else:
        await update.message.reply_text(
            f"‚ùå –ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è —Å—Ç–∞—Ç—å—è! –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {correct_solution}"
        )


async def verify_faction_code(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    code = update.message.text.strip()

    if 'pending_faction' not in user_data[user_id]:
        await update.message.reply_text(
            "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ –≤–æ —Ñ—Ä–∞–∫—Ü–∏—é."
        )
        return

    faction_id = user_data[user_id]['pending_faction']
    faction_info = factions[faction_id]

    if code == faction_info['verify_code']:
        user_data[user_id]['faction'] = faction_id
        del user_data[user_id]['pending_faction']
        save_user_data()

        await update.message.reply_text(
            f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª–∏ –≤–æ —Ñ—Ä–∞–∫—Ü–∏—é: {faction_info['name']}!"
        )
    else:
        await update.message.reply_text(
            "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑."
        )

async def leave_faction(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = str(query.from_user.id)

    keyboard = [
        [InlineKeyboardButton("–î–∞", callback_data="confirm_leave_faction")],
        [InlineKeyboardButton("–ù–µ—Ç", callback_data="cancel_leave_faction")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await query.message.reply_text(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –≤—ã–π—Ç–∏ –∏–∑ —Ñ—Ä–∞–∫—Ü–∏–∏?",
        reply_markup=reply_markup
    )
    await query.answer()


async def work_faction(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = str(query.from_user.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ message_counts
    if user_id in message_counts:
        current_count = message_counts[user_id]["count"]
        if current_count >= 50:
            # –î–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: —Å–±—Ä–æ—Å–∏—Ç—å —Å—á—ë—Ç—á–∏–∫
            message_counts[user_id]["count"] -= 50
            save_message_counts()

            keyboard = [
                [InlineKeyboardButton("–ù–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ", callback_data="start_task")]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)

            await query.message.reply_text(
                "‚úÖ –í—ã –º–æ–∂–µ—Ç–µ –Ω–∞—á–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏!", reply_markup=reply_markup
            )
        else:
            remaining = 50 - current_count
            await query.message.reply_text(
                f"‚ö† –í–∞–º –Ω—É–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ—â—ë {remaining} —Å–æ–æ–±—â–µ–Ω–∏–π, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É –≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏."
            )
    else:
        await query.message.reply_text(
            "‚ö† –£ –≤–∞—Å –µ—â—ë –Ω–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ. –ù–∞—á–Ω–∏—Ç–µ –æ–±—â–∞—Ç—å—Å—è!"
        )

    await query.answer()


async def start_task(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = str(query.from_user.id)

    # –°–±—Ä–æ—Å —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –Ω–∞—á–∏—Å–ª–µ–Ω–∏–µ –æ–ø—ã—Ç–∞
    message_counts[user_id]["count"] -= 50
    user_data[user_id]['xp'] += 10
    user_data[user_id]['rank'] = get_rank(user_data[user_id]['xp'])
    save_message_counts()
    save_user_data()

    await query.message.reply_text("–ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –í—ã –ø–æ–ª—É—á–∏–ª–∏ 10 üíµ.")
    await query.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø–æ–¥—Å—á—ë—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
async def count_messages(update: Update, context: CallbackContext):
    chat_type = update.effective_chat.type
    if chat_type in ["group", "supergroup"]:
        user_id = str(update.effective_user.id)
        username = update.effective_user.username or update.effective_user.full_name

        # –£–≤–µ–ª–∏—á–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        if user_id not in message_counts:
            message_counts[user_id] = {"username": username, "count": 0}
        message_counts[user_id]["count"] += 1

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
        save_message_counts()


async def start(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    if user_id not in user_data:
        user_data[user_id] = {
            'xp': 0,
            'completed_jobs': {},
            'rank': 1,
            'faction': None,
            'metal': 0,
            'crafted_weapons': []  # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Å–∫—Ä–∞—Ñ—á–µ–Ω–Ω–æ–≥–æ –æ—Ä—É–∂–∏—è
        }
        save_user_data()


    keyboard = []

    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç –≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏
    if not user_data[user_id]['faction']:
        keyboard = [
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="show_jobs")],
            [InlineKeyboardButton("üèõ –í—Ö–æ–¥ –≤–æ —Ñ—Ä–∞–∫—Ü–∏—é", callback_data="enter_faction")]
        ]
    else:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Å—Ç–æ–∏—Ç –≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏
        keyboard = [
            [InlineKeyboardButton("üìã –°–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π", callback_data="show_jobs")],
            [InlineKeyboardButton("üìã –ó–∞–¥–∞–Ω–∏—è –¥–ª—è —Ä–∞–Ω–≥–∞", callback_data="rank_jobs")],
            [InlineKeyboardButton("üö™ –í—ã–π—Ç–∏ –∏–∑ —Ñ—Ä–∞–∫—Ü–∏–∏", callback_data="leave_faction")]
        ]

    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ RP –∏–≥—Ä–µ. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –Ω–∏–∂–µ:',
        reply_markup=reply_markup
    )

async def rank_task(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = str(query.from_user.id)

    if user_id not in user_data or not user_data[user_id]['faction']:
        await query.message.reply_text("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏.")
        await query.answer()
        return

    faction_id = user_data[user_id]['faction']
    faction_info = factions[faction_id]

    await query.message.reply_text(
        f"üìù –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è —Ä–∞–Ω–≥–∞ –≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏ {faction_info['name']}:\n{faction_info['rank_task']}"
    )
    await query.answer()


async def confirm_leave_faction(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = str(query.from_user.id)

    user_data[user_id]['faction'] = None
    save_user_data()

    await query.message.reply_text(
        "üö™ –í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Ñ—Ä–∞–∫—Ü–∏—é."
    )
    await query.answer()

async def cancel_leave_faction(update: Update, context: CallbackContext):
    query = update.callback_query
    await query.message.reply_text(
        "–û—Ç–º–µ–Ω–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ —Ñ—Ä–∞–∫—Ü–∏–∏."
    )
    await query.answer()

async def show_jobs(update: Update, context: CallbackContext):
    query = update.callback_query
    keyboard = []
    for job_id, job_info in jobs.items():
        keyboard.append([InlineKeyboardButton(
            job_info['name'],
            callback_data=f'job_{job_id}'
        )])

    reply_markup = InlineKeyboardMarkup(keyboard)
    await query.message.reply_text(
        '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É:',
        reply_markup=reply_markup
    )
    await query.answer()

async def button_callback(update: Update, context: CallbackContext):
    query = update.callback_query
    user_id = str(query.from_user.id)

    if user_id not in user_data:
        user_data[user_id] = {
            'xp': 100,
            'completed_jobs': {},
            'rank': 1,
            'faction': None
        }

    data = query.data

    if data == "show_jobs":
        await show_jobs(update, context)
    elif data == "enter_faction":
        await enter_faction(update, context)
    elif data == "rank_jobs":
        await rank_jobs(update, context)
    elif data == "start_task_metal":
        await start_task_metal(update, context)
    elif data == "rank_task_patient":
        await rank_task_patient(update, context)
    elif data == "treat_patient":
        await treat_patient(update, context)
    elif data == "rank_task_case":
        await rank_task_case(update, context)
    elif data == "start_task_craft":
        await start_task_craft(update, context)
    elif data.startswith("craft_"):  # –ù–æ–≤—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫—Ä–∞—Ñ—Ç–∞ –æ—Ä—É–∂–∏—è
        await craft_weapon(update, context)
    elif data == "start_task_battle":
        await start_task_battle(update, context)
    elif data.startswith("faction_"):
        await join_faction(update, context)
    elif data == "leave_faction":
        await leave_faction(update, context)
    elif data == "confirm_leave_faction":
        await confirm_leave_faction(update, context)
    elif data == "cancel_leave_faction":
        await cancel_leave_faction(update, context)
    elif data == "work_faction":
        await work_faction(update, context)
    elif data == "rank_task":
        await rank_task(update, context)
    elif data == "start_task":
        await start_task(update, context)
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —Ç–∞–∫–æ–π –∫–ª—é—á –≤ jobs
        job_id = data.replace('job_', '')
        if job_id not in jobs:
            await query.message.reply_text("‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ.")
            await query.answer()
            return

        job_info = jobs[job_id]

        now = datetime.now().timestamp()
        if job_id in user_data[user_id].get('completed_jobs', {}):
            last_completion = user_data[user_id]['completed_jobs'][job_id]
            if now - last_completion < job_info['cooldown']:
                time_left = int(job_info['cooldown'] - (now - last_completion))
                await query.answer(
                    f'–ü–æ–¥–æ–∂–¥–∏—Ç–µ {(time_left % 3600) // 60} –º–∏–Ω –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º',
                    show_alert=True
                )
                return

        active_jobs[user_id] = job_id
        await query.message.reply_text(
            f"üìù –ó–∞–¥–∞–Ω–∏–µ: {job_info['name']}\n"
            f"üîó –°—Å—ã–ª–∫–∞: {job_info['url']}\n\n"
            f"–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
        )
        await query.answer()



# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –∑–∞–¥–∞–Ω–∏—è
async def verify_code(update: Update, context: CallbackContext):
    user_id = str(update.effective_user.id)
    code = update.message.text.strip()

    if user_id not in active_jobs:
        await update.message.reply_text("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –Ω–∞—á–∞–ª–∞.")
        return

    job_id = active_jobs[user_id]
    job_info = jobs[job_id]

    logger.info(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π –∫–æ–¥: {code}, –æ–∂–∏–¥–∞–µ–º—ã–π –∫–æ–¥: {job_info['verify_code']}")

    if code == job_info['verify_code']:
        user_data[user_id]['xp'] += job_info['xp']
        user_data[user_id]['completed_jobs'][job_id] = datetime.now().timestamp()
        user_data[user_id]['rank'] = get_rank(user_data[user_id]['xp'])
        save_user_data()

        del active_jobs[user_id]

        await update.message.reply_text(
            f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n"
            f"üíé –ü–æ–ª—É—á–µ–Ω–æ: +{job_info['xp']} XP\n"
            f"üèÜ –í–∞—à —Ä–∞–Ω–≥: {user_data[user_id]['rank']}\n"
            f"üìä –í—Å–µ–≥–æ XP: {user_data[user_id]['xp']}"
        )
    else:
        await update.message.reply_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")


async def message_handler(update: Update, context: CallbackContext):
    user_id = str(update.message.from_user.id)
    if user_id in user_data and 'pending_faction' in user_data[user_id]:
        await verify_faction_code(update, context)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
    if user_id in active_jobs:
        await verify_code(update, context)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ –ø–∞—Ü–∏–µ–Ω—Ç–∞
    if "current_patient" in context.user_data:
        await treat_patient(update, context)

    if "current_law" in context.user_data:
        await handle_user_answer(update, context)
        return

    # –£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    # await update.message.reply_text("‚ùå –£ –≤–∞—Å —Å–µ–π—á–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á.")

    # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á—ë—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π
    if user_id not in message_counts:
        username = update.effective_user.username or update.effective_user.full_name
        message_counts[user_id] = {"username": username, "count": 0}

    message_counts[user_id]["count"] += 1

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Ñ–∞–π–ª
    save_message_counts()

def main():
    application = Application.builder().token(TOKEN).build()

    application.add_handler(CommandHandler("start", start))
    application.add_handler(CallbackQueryHandler(button_callback))

    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_user_answer))

    application.run_polling()

if __name__ == "__main__":
    main()
