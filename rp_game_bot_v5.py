import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, filters
import json
import random
import string
from datetime import datetime

# Configure logging
logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# Bot token
TOKEN = "7260525635:AAF63mWkBTYl-p0D01-BfGlSaCsJamT-wi0"

# Store user data
user_data = {}
try:
    with open('user_data.json', 'r') as f:
        user_data = json.load(f)
except FileNotFoundError:
    pass

# Store verification codes
verification_codes = {}

# Available jobs
jobs = {
    'like_website': {
        'name': '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ –Ω–∞ —Å–∞–π—Ç–µ',
        'description': '–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏ –ø–æ—Å—Ç–∞–≤—å—Ç–µ –ª–∞–π–∫ –Ω–∞ —Å–∞–π—Ç–µ',
        'url': 'https://example.com/post/123',
        'xp': 10,
        'cooldown': 3600,
        'verification_code': True  # –¢—Ä–µ–±—É–µ—Ç—Å—è –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    },
    'comment_post': {
        'name': '–û—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π',
        'description': '–ù–∞–ø–∏—à–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥ –ø–æ—Å—Ç–æ–º',
        'url': 'https://example.com/post/456',
        'xp': 15,
        'cooldown': 7200,
        'verification_code': True
    },
    'share_link': {
        'name': '–ü–æ–¥–µ–ª–∏—Ç—å—Å—è —Å—Å—ã–ª–∫–æ–π',
        'description': '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –Ω–∞ —Å–≤–æ–µ–π —Å—Ç—Ä–∞–Ω–∏—Ü–µ',
        'url': 'https://example.com/share',
        'xp': 20,
        'cooldown': 86400,
        'verification_code': True
    }
}

def generate_verification_code():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"""
    return ''.join(random.choices(string.ascii_uppercase + string.digits, k=6))

def save_user_data():
    with open('user_data.json', 'w') as f:
        json.dump(user_data, f)

async def start(update: Update, context: CallbackContext):
    try:
        user_id = str(update.effective_user.id)
        if user_id not in user_data:
            user_data[user_id] = {
                'xp': 0,
                'completed_jobs': {},
                'rank': '–ù–æ–≤–∏—á–æ–∫'
            }
            save_user_data()
        
        await update.message.reply_text(
            '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ RP –∏–≥—Ä–µ.\n'
            '–ò—Å–ø–æ–ª—å–∑—É–π /job –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–±–æ—Ç.\n'
            '–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ä–∞–±–æ—Ç—ã, –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.'
        )
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def get_rank(xp):
    if xp < 100:
        return '–ù–æ–≤–∏—á–æ–∫'
    elif xp < 300:
        return '–û–ø—ã—Ç–Ω—ã–π'
    elif xp < 600:
        return '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª'
    else:
        return '–ú–∞—Å—Ç–µ—Ä'

async def job(update: Update, context: CallbackContext):
    try:
        keyboard = []
        for job_id, job_info in jobs.items():
            keyboard.append([InlineKeyboardButton(
                job_info['name'], 
                callback_data=f'job_{job_id}'
            )])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É:',
            reply_markup=reply_markup
        )
    except Exception as e:
        logger.error(f"Error in job command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def button_callback(update: Update, context: CallbackContext):
    try:
        query = update.callback_query
        user_id = str(query.from_user.id)
        
        if user_id not in user_data:
            user_data[user_id] = {
                'xp': 0,
                'completed_jobs': {},
                'rank': '–ù–æ–≤–∏—á–æ–∫'
            }
        
        job_id = query.data.replace('job_', '')
        job_info = jobs[job_id]
        
        # Check cooldown
        now = datetime.now().timestamp()
        if job_id in user_data[user_id].get('completed_jobs', {}):
            last_completion = user_data[user_id]['completed_jobs'][job_id]
            if now - last_completion < job_info['cooldown']:
                time_left = int(job_info['cooldown'] - (now - last_completion))
                await query.answer(
                    f'–ü–æ–¥–æ–∂–¥–∏—Ç–µ {time_left // 3600} —á {(time_left % 3600) // 60} –º–∏–Ω –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º',
                    show_alert=True
                )
                return

        # Generate verification code
        verification_code = generate_verification_code()
        verification_codes[user_id] = {
            'code': verification_code,
            'job_id': job_id,
            'timestamp': now
        }
        
        await query.message.reply_text(
            f"üìù –ó–∞–¥–∞–Ω–∏–µ: {job_info['name']}\n"
            f"üìã {job_info['description']}\n"
            f"üîó –°—Å—ã–ª–∫–∞: {job_info['url']}\n\n"
            f"‚ùóÔ∏è –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: {verification_code}\n"
            f"–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç –∫–æ–¥ –≤ —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ –Ω–∞ —Å–∞–π—Ç–µ.\n"
            f"–ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –ø–æ—è–≤–∏—Ç—Å—è –Ω–∞ —Å–∞–π—Ç–µ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏."
        )
        
        await query.answer()
        
    except Exception as e:
        logger.error(f"Error in button callback: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

async def verify_code(update: Update, context: CallbackContext):
    try:
        user_id = str(update.effective_user.id)
        code = update.message.text.strip().upper()
        
        if user_id not in verification_codes:
            await update.message.reply_text(
                "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /job —á—Ç–æ–±—ã –≤—ã–±—Ä–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ."
            )
            return
        
        job_data = verification_codes[user_id]
        job_info = jobs[job_data['job_id']]
        
        # –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ —á–µ—Ä–µ–∑ API —Å–∞–π—Ç–∞
        # –°–µ–π—á–∞—Å –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–¥ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç —Å –∏–∑–Ω–∞—á–∞–ª—å–Ω—ã–º
        if code != job_data['code'] and len(code) == 6:  # –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
            # Add XP and update completion time
            user_data[user_id]['xp'] += job_info['xp']
            user_data[user_id]['completed_jobs'][job_data['job_id']] = datetime.now().timestamp()
            new_rank = get_rank(user_data[user_id]['xp'])
            user_data[user_id]['rank'] = new_rank
            save_user_data()
            
            # Remove verification code
            del verification_codes[user_id]
            
            await update.message.reply_text(
                f"‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ!\n"
                f"üíé –ü–æ–ª—É—á–µ–Ω–æ: +{job_info['xp']} XP\n"
                f"üèÜ –í–∞—à —Ä–∞–Ω–≥: {new_rank}\n"
                f"üìä –í—Å–µ–≥–æ XP: {user_data[user_id]['xp']}"
            )
        else:
            await update.message.reply_text(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
                "–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –∫–æ–¥, –ø–æ–ª—É—á–µ–Ω–Ω—ã–π —Å —Å–∞–π—Ç–∞ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏."
            )
            
    except Exception as e:
        logger.error(f"Error in verify_code: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ–¥–∞.")

async def stats(update: Update, context: CallbackContext):
    try:
        user_id = str(update.effective_user.id)
        if user_id not in user_data:
            await update.message.reply_text('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è!')
            return
        
        user_stats = user_data[user_id]
        await update.message.reply_text(
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–†–∞–Ω–≥: {user_stats['rank']}\n"
            f"XP: {user_stats['xp']}\n"
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {len(user_stats.get('completed_jobs', {}))}"
        )
    except Exception as e:
        logger.error(f"Error in stats command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    # Initialize bot with increased timeout
    application = Application.builder().token(TOKEN).connect_timeout(30.0).read_timeout(30.0).write_timeout(30.0).build()
    
    # Add handlers
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("job", job))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CallbackQueryHandler(button_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, verify_code))
    
    # Start the bot
    print("Starting bot...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
