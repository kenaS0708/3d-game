import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, CallbackContext, CallbackQueryHandler, MessageHandler, filters
import json
from datetime import datetime
import random
import asyncio

# –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏
logging.getLogger('httpx').setLevel(logging.WARNING)
logging.getLogger('urllib3').setLevel(logging.WARNING)
logging.getLogger('asyncio').setLevel(logging.WARNING)

logging.basicConfig(
    format='%(asctime)s - %(levelname)s - %(message)s',
    level=logging.WARNING
)
logger = logging.getLogger(__name__)

# Bot token
TOKEN = "7260525635:AAF63mWkBTYl-p0D01-BfGlSaCsJamT-wi0"

# Store user data
user_data = {}
try:
    with open('user_data.json', 'r') as f:
        user_data = json.load(f)
except FileNotFoundError:
    pass

# –ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
active_jobs = {}

# –û–±—ã—á–Ω—ã–µ —Ä–∞–±–æ—Ç—ã
jobs = {
    'like_website': {
        'name': '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ –Ω–∞ –≤–∏–¥–µ–æ ‚Ññ1',
        'url': 'https://lyl.su/gbtv',
        'xp': 5,
        'cooldown': 300,
        'verify_code': '456327'
    },
    'comment_post': {
        'name': '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ –Ω–∞ –≤–∏–¥–µ–æ ‚Ññ2',
        'url': 'https://lyl.su/DcI6',
        'xp': 10,
        'cooldown': 600,
        'verify_code': '652833'
    },
    'share_link': {
        'name': '–ü–æ—Å—Ç–∞–≤–∏—Ç—å –ª–∞–π–∫ –Ω–∞ –≤–∏–¥–µ–æ ‚Ññ3',
        'url': 'https://lyl.su/CVDz',
        'xp': 15,
        'cooldown': 900,
        'verify_code': '917306'
    }
}

# –§—Ä–∞–∫—Ü–∏–∏ –∏ –∏—Ö –∫–æ–¥—ã
factions = {
    'army': {
        'name': '–ê—Ä–º–∏—è',
        'code': '578921',
        'jobs': {
            'patrol': {
                'name': '–ü–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã',
                'description': '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—É /patrol_start, –ø—Ä–æ–π—Ç–∏ –≤–∏—Ä—Ç—É–∞–ª—å–Ω—ã–π –º–∞—Ä—à—Ä—É—Ç',
                'xp': 20,
                'cooldown': 1800
            },
            'border': {
                'name': '–û—Ö—Ä–∞–Ω–∞ –≥—Ä–∞–Ω–∏—Ü—ã',
                'description': '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç–∞ –Ω–∞ –≥—Ä–∞–Ω–∏—Ü–µ',
                'xp': 25,
                'cooldown': 2400
            },
            'training': {
                'name': '–£—á–µ–Ω–∏—è',
                'description': '–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∫–æ–º–∞–Ω–¥ –∫–æ–º–∞–Ω–¥–∏—Ä–∞',
                'xp': 15,
                'cooldown': 1200
            },
            'inventory': {
                'name': '–°–∫–ª–∞–¥—Å–∫–æ–µ –¥–µ–ª–æ',
                'description': '–ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è –Ω–∞ —Å–∫–ª–∞–¥–µ',
                'xp': 10,
                'cooldown': 900
            }
        }
    },
    'court': {
        'name': '–°—É–¥',
        'code': '662730',
        'jobs': {
            'case': {
                'name': '–†–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –¥–µ–ª–∞',
                'description': '–í—ã–Ω–µ—Å–µ–Ω–∏–µ –ø—Ä–∏–≥–æ–≤–æ—Ä–∞ –ø–æ –¥–µ–ª—É',
                'xp': 30,
                'cooldown': 3600
            },
            'protocol': {
                'name': '–°–æ—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞',
                'description': '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –ø—Ä–æ—Ç–æ–∫–æ–ª–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è',
                'xp': 20,
                'cooldown': 1800
            },
            'consult': {
                'name': '–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∞—è –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è',
                'description': '–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è –≥—Ä–∞–∂–¥–∞–Ω',
                'xp': 15,
                'cooldown': 1200
            },
            'warrant': {
                'name': '–ê—Ä–µ—Å—Ç –æ—Ä–¥–µ—Ä',
                'description': '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –æ—Ä–¥–µ—Ä–∞ –Ω–∞ –∞—Ä–µ—Å—Ç',
                'xp': 25,
                'cooldown': 2400
            }
        }
    },
    'hospital': {
        'name': '–ë–æ–ª—å–Ω–∏—Ü–∞',
        'code': '435889',
        'jobs': {
            'diagnosis': {
                'name': '–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø–∞—Ü–∏–µ–Ω—Ç–∞',
                'description': '–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–∏–∞–≥–Ω–æ–∑–∞ –ø–æ —Å–∏–º–ø—Ç–æ–º–∞–º',
                'xp': 20,
                'cooldown': 1800
            },
            'emergency': {
                'name': '–°—Ä–æ—á–Ω—ã–π –≤—ã–∑–æ–≤',
                'description': '–†–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ —ç–∫—Å—Ç—Ä–µ–Ω–Ω—ã–π –≤—ã–∑–æ–≤',
                'xp': 30,
                'cooldown': 2400
            },
            'prescription': {
                'name': '–†–µ—Ü–µ–ø—Ç –ª–µ–∫–∞—Ä—Å—Ç–≤–∞',
                'description': '–í—ã–ø–∏—Å–∫–∞ —Ä–µ—Ü–µ–ø—Ç–∞ –ø–∞—Ü–∏–µ–Ω—Ç—É',
                'xp': 15,
                'cooldown': 1200
            },
            'surgery': {
                'name': '–û–ø–µ—Ä–∞—Ü–∏—è',
                'description': '–ü—Ä–æ–≤–µ–¥–µ–Ω–∏–µ –æ–ø–µ—Ä–∞—Ü–∏–∏',
                'xp': 35,
                'cooldown': 3600
            }
        }
    }
}

def save_user_data():
    with open('user_data.json', 'w') as f:
        json.dump(user_data, f)

def get_main_keyboard():
    keyboard = []
    keyboard.append([InlineKeyboardButton("üíº –†–∞–±–æ—Ç–∞", callback_data="show_jobs")])
    keyboard.append([InlineKeyboardButton("üè¢ –í—Ö–æ–¥ –≤–æ —Ñ—Ä–∞–∫—Ü–∏—é", callback_data="join_faction")])
    return InlineKeyboardMarkup(keyboard)

def get_faction_keyboard():
    keyboard = []
    for faction_id, faction in factions.items():
        keyboard.append([InlineKeyboardButton(faction['name'], callback_data=f"select_faction_{faction_id}")])
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    return InlineKeyboardMarkup(keyboard)

def get_user_keyboard(user_id):
    keyboard = []
    keyboard.append([InlineKeyboardButton("üíº –†–∞–±–æ—Ç–∞", callback_data="show_jobs")])
    
    if user_id in user_data and 'faction' in user_data[user_id]:
        keyboard.append([InlineKeyboardButton("üëî –†–∞–±–æ—Ç–∞ –≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏", callback_data="faction_jobs")])
        keyboard.append([InlineKeyboardButton("üö™ –í—ã—Ö–æ–¥ –∏–∑ —Ñ—Ä–∞–∫—Ü–∏–∏", callback_data="leave_faction")])
    else:
        keyboard.append([InlineKeyboardButton("üè¢ –í—Ö–æ–¥ –≤–æ —Ñ—Ä–∞–∫—Ü–∏—é", callback_data="join_faction")])
    
    return InlineKeyboardMarkup(keyboard)

async def start(update: Update, context: CallbackContext):
    try:
        user_id = str(update.effective_user.id)
        if user_id not in user_data:
            user_data[user_id] = {
                'xp': 0,
                'completed_jobs': {},
                'rank': '–ù–æ–≤–∏—á–æ–∫'
            }
            save_user_data()
        
        keyboard = get_user_keyboard(user_id)
        await update.message.reply_text(
            '–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞–±–æ—Ç—ã –≤ RP –∏–≥—Ä–µ.\n'
            '–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:',
            reply_markup=keyboard
        )
    except Exception as e:
        logger.error(f"Error in start command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def get_rank(xp):
    if xp < 100:
        return '–ù–æ–≤–∏—á–æ–∫'
    elif xp < 300:
        return '–û–ø—ã—Ç–Ω—ã–π'
    elif xp < 600:
        return '–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª'
    else:
        return '–ú–∞—Å—Ç–µ—Ä'

async def show_jobs(update: Update, context: CallbackContext):
    keyboard = []
    for job_id, job_info in jobs.items():
        keyboard.append([InlineKeyboardButton(
            job_info['name'], 
            callback_data=f'job_{job_id}'
        )])
    keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
    reply_markup = InlineKeyboardMarkup(keyboard)
    
    if update.callback_query:
        await update.callback_query.message.edit_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É:',
            reply_markup=reply_markup
        )
    else:
        await update.message.reply_text(
            '–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–±–æ—Ç—É:',
            reply_markup=reply_markup
        )

async def show_faction_jobs(update: Update, context: CallbackContext):
    try:
        user_id = str(update.effective_user.id)
        if user_id not in user_data or 'faction' not in user_data[user_id]:
            await update.callback_query.answer("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏!")
            return

        user_faction = user_data[user_id]['faction']
        faction_data = factions[user_faction]
        
        keyboard = []
        current_time = datetime.now().timestamp()
        
        for job_id, job in faction_data['jobs'].items():
            last_completion = user_data[user_id].get('completed_jobs', {}).get(f"faction_{job_id}", 0)
            cooldown_remaining = job['cooldown'] - (current_time - last_completion)
            
            if cooldown_remaining <= 0:
                keyboard.append([InlineKeyboardButton(f"üìã {job['name']} (+{job['xp']} XP)", 
                                                    callback_data=f"start_faction_job_{job_id}")])
            else:
                minutes = int(cooldown_remaining // 60)
                keyboard.append([InlineKeyboardButton(f"‚è≥ {job['name']} ({minutes} –º–∏–Ω)", 
                                                    callback_data="cooldown")])
        
        keyboard.append([InlineKeyboardButton("‚Ü©Ô∏è –ù–∞–∑–∞–¥", callback_data="back_to_main")])
        await update.callback_query.edit_message_text(
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è {faction_data['name']}:",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
    except Exception as e:
        logger.error(f"Error in show_faction_jobs: {e}")
        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_callback(update: Update, context: CallbackContext):
    try:
        query = update.callback_query
        user_id = str(query.from_user.id)
        data = query.data
        
        if data == "show_jobs":
            await show_jobs(update, context)
        
        elif data == "join_faction":
            await query.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ —Ñ—Ä–∞–∫—Ü–∏—é –¥–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è:",
                reply_markup=get_faction_keyboard()
            )
        
        elif data.startswith("select_faction_"):
            faction_id = data.replace("select_faction_", "")
            await query.message.edit_text(
                f"–î–ª—è –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤–æ —Ñ—Ä–∞–∫—Ü–∏—é {factions[faction_id]['name']}\n"
                f"–æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
            )
            context.user_data[user_id] = {'joining_faction': faction_id}
        
        elif data == "faction_jobs":
            await show_faction_jobs(update, context)
            
        elif data == "leave_faction":
            keyboard = [[
                InlineKeyboardButton("–î–∞", callback_data="confirm_leave"),
                InlineKeyboardButton("–ù–µ—Ç", callback_data="back_to_main")
            ]]
            await query.message.edit_text(
                "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –ø–æ–∫–∏–Ω—É—Ç—å —Ñ—Ä–∞–∫—Ü–∏—é?",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        
        elif data == "confirm_leave":
            if 'faction' in user_data[user_id]:
                old_faction = factions[user_data[user_id]['faction']]['name']
                del user_data[user_id]['faction']
                save_user_data()
                await query.message.edit_text(
                    f"–í—ã –ø–æ–∫–∏–Ω—É–ª–∏ —Ñ—Ä–∞–∫—Ü–∏—é {old_faction}",
                    reply_markup=get_user_keyboard(user_id)
                )
        
        elif data == "back_to_main":
            await query.message.edit_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_user_keyboard(user_id)
            )
        
        elif data.startswith("job_"):
            job_id = data.replace("job_", "")
            job_info = jobs[job_id]
            
            # Check cooldown
            now = datetime.now().timestamp()
            if job_id in user_data[user_id].get('completed_jobs', {}):
                last_completion = user_data[user_id]['completed_jobs'][job_id]
                if now - last_completion < job_info['cooldown']:
                    time_left = int(job_info['cooldown'] - (now - last_completion))
                    await query.answer(
                        f'–ü–æ–¥–æ–∂–¥–∏—Ç–µ {(time_left % 3600) // 60} –º–∏–Ω –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω—ã–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ–º',
                        show_alert=True
                    )
                    return

            active_jobs[user_id] = job_id
            await query.message.edit_text(
                f"üìù –ó–∞–¥–∞–Ω–∏–µ: {job_info['name']}\n"
                f"üîó –°—Å—ã–ª–∫–∞: {job_info['url']}\n\n"
                f"–ü–æ—Å–ª–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è."
            )
        
        elif data.startswith("start_faction_job_"):
            job_id = data.replace("start_faction_job_", "")
            user_faction = user_data[user_id]['faction']
            job = factions[user_faction]['jobs'][job_id]
            
            active_jobs[user_id] = {
                'type': 'faction',
                'job_id': job_id,
                'faction': user_faction
            }
            
            await query.edit_message_text(
                f"–ó–∞–¥–∞–Ω–∏–µ: {job['name']}\n\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {job['description']}\n\n"
                "–î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏.",
                reply_markup=InlineKeyboardMarkup([[
                    InlineKeyboardButton("‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_job")
                ]])
            )
            
        await query.answer()
        
    except Exception as e:
        logger.error(f"Error in callback handler: {e}")
        await query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", show_alert=True)

async def patrol_start(update: Update, context: CallbackContext):
    await update.message.reply_text("–ü–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞—á–∞—Ç–æ! –ñ–¥–∏—Ç–µ –æ—Ç—á–µ—Ç —á–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç.")
    await asyncio.sleep(10)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç
    incidents = ["–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —à—É–º", "—É—á–µ–Ω–∏—è", "–Ω–∏—á–µ–≥–æ"]
    incident = random.choice(incidents)
    await update.message.reply_text(f"–ü–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–æ–∏–∑–æ—à–ª–æ: {incident}. –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ.")

async def patrol_end(update: Update, context: CallbackContext):
    incidents = ["–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —à—É–º", "—É—á–µ–Ω–∏—è", "–Ω–∏—á–µ–≥–æ"]
    incident = random.choice(incidents)
    await update.message.reply_text(f"–ü–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–æ–∏–∑–æ—à–ª–æ: {incident}.")

async def border_check(update: Update, context: CallbackContext):
    vehicles = ["–≥—Ä—É–∑–æ–≤–∏–∫", "–¥–∂–∏–ø"]
    vehicle = random.choice(vehicles)
    await update.message.reply_text(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {vehicle}. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∞—Ç—å? –û—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å' –∏–ª–∏ '–∑–∞–¥–µ—Ä–∂–∞—Ç—å'.")

async def inventory_check(update: Update, context: CallbackContext):
    await update.message.reply_text("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞—Ç—Ä–æ–Ω–æ–≤ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —á–∏—Å–ª–æ.")

async def case(update: Update, context: CallbackContext):
    await update.message.reply_text("–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –æ–±–≤–∏–Ω—è–µ—Ç—Å—è –≤ –∫—Ä–∞–∂–µ. –í—ã–±–µ—Ä–∏—Ç–µ: '–æ–ø—Ä–∞–≤–¥–∞—Ç—å', '–æ—à—Ç—Ä–∞—Ñ–æ–≤–∞—Ç—å', '–ø–æ—Å–∞–¥–∏—Ç—å –≤ —Ç—é—Ä—å–º—É'.")

async def emergency(update: Update, context: CallbackContext):
    await update.message.reply_text("–ß–ü: –∞–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–∞—è –∞–≤–∞—Ä–∏—è! –û—Ç–ø—Ä–∞–≤—å—Ç–µ /respond –¥–ª—è —Ä–µ–∞–≥–∏—Ä–æ–≤–∞–Ω–∏—è.")

async def handle_message(update: Update, context: CallbackContext):
    user_message = update.message.text.lower()
    user_id = str(update.effective_user.id)

    if user_id in active_jobs:
        job = active_jobs[user_id]
        if job['type'] == 'faction':
            faction = job['faction']
            job_id = job['job_id']
            # –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ verify_code

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏—è
    if user_message == '/patrol_start':
        await patrol_start(update, context)
    elif user_message == '/patrol_end':
        await patrol_end(update, context)
    elif user_message == '/border_check':
        await border_check(update, context)
    elif user_message == '/inventory_check':
        await inventory_check(update, context)
    elif user_message == '/case':
        await case(update, context)
    elif user_message == '/emergency':
        await emergency(update, context)
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Ç—á–µ—Ç—ã
    elif "–ø–æ—Ç–µ—Ä—è" in user_message or "—É—á–µ–Ω–∏—è" in user_message:
        await update.message.reply_text("–û—Ç—á–µ—Ç –ø—Ä–∏–Ω—è—Ç! –ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    elif user_message == "–Ω–∏—á–µ–≥–æ":
        await update.message.reply_text("–û—Ç—á–µ—Ç –ø—Ä–∏–Ω—è—Ç! –ù–∏—á–µ–≥–æ –Ω–µ –ø—Ä–æ–∏–∑–æ—à–ª–æ, –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ.")
    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–æ–æ–±—â–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ.")

async def stats(update: Update, context: CallbackContext):
    try:
        user_id = str(update.effective_user.id)
        if user_id not in user_data:
            await update.message.reply_text('–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏. –ù–∞—á–Ω–∏—Ç–µ –≤—ã–ø–æ–ª–Ω—è—Ç—å –∑–∞–¥–∞–Ω–∏—è!')
            return
        
        user_stats = user_data[user_id]
        faction_text = ""
        if 'faction' in user_stats:
            faction_id = user_stats['faction']
            faction_text = f"\n–§—Ä–∞–∫—Ü–∏—è: {factions[faction_id]['name']}"
        
        await update.message.reply_text(
            f"üìä –í–∞—à–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
            f"–†–∞–Ω–≥: {user_stats['rank']}\n"
            f"XP: {user_stats['xp']}"
            f"{faction_text}\n"
            f"–í—ã–ø–æ–ª–Ω–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π: {len(user_stats.get('completed_jobs', {}))}"
        )
    except Exception as e:
        logger.error(f"Error in stats command: {e}")
        await update.message.reply_text("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

async def handle_patrol(update: Update, context: CallbackContext):
    await update.callback_query.edit_message_text("–í—ã –Ω–∞—á–∞–ª–∏ –ø–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –±–∞–∑—ã. –û—Ç–º–µ—Ç—å—Ç–µ —á–µ–∫–ø–æ–∏–Ω—Ç—ã –∏ –∑–∞–≤–µ—Ä—à–∏—Ç–µ —Å /patrol_end.")
    await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç
    incidents = ["–ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π —à—É–º", "—É—á–µ–Ω–∏—è", "–Ω–∏—á–µ–≥–æ"]
    incident = random.choice(incidents)
    await update.message.reply_text(f"–ü–∞—Ç—Ä—É–ª–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ! –ü—Ä–æ–∏–∑–æ—à–ª–æ: {incident}. –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ –ø—Ä–æ–∏–∑–æ—à–ª–æ.")

async def handle_border_guard(update: Update, context: CallbackContext):
    vehicles = ["–≥—Ä—É–∑–æ–≤–∏–∫", "–¥–∂–∏–ø", "–º–æ—Ç–æ—Ü–∏–∫–ª"]
    decision_data = random.choice(vehicles)
    await update.callback_query.edit_message_text(f"–ü—Ä–æ–≤–µ—Ä—è–µ–º—ã–π —Ç—Ä–∞–Ω—Å–ø–æ—Ä—Ç: {decision_data}. –ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å –∏–ª–∏ –∑–∞–¥–µ—Ä–∂–∞—Ç—å?")

async def handle_training(update: Update, context: CallbackContext):
    commands = ["–í—Å—Ç–∞—Ç—å –≤ —Å—Ç—Ä–æ–π", "–û—Ç–∫—Ä—ã—Ç—å –æ–≥–æ–Ω—å", "–ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ"]
    command = random.choice(commands)
    await update.callback_query.edit_message_text(f"–ö–æ–º–∞–Ω–¥–∞ –¥–ª—è —É—á–µ–Ω–∏–π: {command}. –ë—ã—Å—Ç—Ä–æ —Ä–µ–∞–≥–∏—Ä—É–π—Ç–µ!")

async def handle_case_review(update: Update, context: CallbackContext):
    cases = ["–ì—Ä–∞–∂–¥–∞–Ω–∏–Ω –æ–±–≤–∏–Ω—è–µ—Ç—Å—è –≤ –∫—Ä–∞–∂–µ", "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ü–î–î", "–ü–æ–¥–æ–∑—Ä–µ–Ω–∏–µ –≤ –º–æ—à–µ–Ω–Ω–∏—á–µ—Å—Ç–≤–µ"]
    case = random.choice(cases)
    await update.callback_query.edit_message_text(f"–†–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –¥–µ–ª–æ: {case}. –í—ã–±–µ—Ä–∏—Ç–µ: –æ–ø—Ä–∞–≤–¥–∞—Ç—å, –æ—à—Ç—Ä–∞—Ñ–æ–≤–∞—Ç—å, –ø–æ—Å–∞–¥–∏—Ç—å.")

async def handle_protocol(update: Update, context: CallbackContext):
    events = ["–ù–∞—Ä—É—à–µ–Ω–∏–µ —Å–∫–æ—Ä–æ—Å—Ç–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞", "–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∞—è –ø–∞—Ä–∫–æ–≤–∫–∞", "–ü—Ä–æ–µ–∑–¥ –Ω–∞ –∫—Ä–∞—Å–Ω—ã–π —Å–≤–µ—Ç"]
    event = random.choice(events)
    await update.callback_query.edit_message_text(f"–û—Ñ–æ—Ä–º–∏—Ç–µ –ø—Ä–æ—Ç–æ–∫–æ–ª –Ω–∞ —Å–æ–±—ã—Ç–∏–µ: {event}.")

async def handle_consultation(update: Update, context: CallbackContext):
    questions = ["–ú–æ–≥—É –ª–∏ —è –ø–æ–¥–∞—Ç—å –≤ —Å—É–¥ –Ω–∞ —Å–æ—Å–µ–¥–∞?", "–ö–∞–∫ –æ–±–∂–∞–ª–æ–≤–∞—Ç—å —à—Ç—Ä–∞—Ñ?", "–ö–∞–∫–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –Ω—É–∂–Ω—ã –¥–ª—è –∏—Å–∫–∞?"]
    question = random.choice(questions)
    await update.callback_query.edit_message_text(f"–í–æ–ø—Ä–æ—Å –æ—Ç –≥—Ä–∞–∂–¥–∞–Ω–∏–Ω–∞: {question}. –î–∞–π—Ç–µ –æ—Ç–≤–µ—Ç.")

async def handle_diagnosis(update: Update, context: CallbackContext):
    symptoms = ["–õ–∏—Ö–æ—Ä–∞–¥–∫–∞ –∏ –∫–∞—à–µ–ª—å", "–ë–æ–ª—å –≤ –∂–∏–≤–æ—Ç–µ", "–°–ª–∞–±–æ—Å—Ç—å –∏ –≥–æ–ª–æ–≤–Ω–∞—è –±–æ–ª—å"]
    symptom = random.choice(symptoms)
    await update.callback_query.edit_message_text(f"–°–∏–º–ø—Ç–æ–º—ã –ø–∞—Ü–∏–µ–Ω—Ç–∞: {symptom}. –ü–æ—Å—Ç–∞–≤—å—Ç–µ –¥–∏–∞–≥–Ω–æ–∑.")

async def handle_emergency(update: Update, context: CallbackContext):
    emergencies = ["–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω–∞—è –∞–≤–∞—Ä–∏—è", "–°–µ—Ä–¥–µ—á–Ω—ã–π –ø—Ä–∏—Å—Ç—É–ø", "–ü–∞–¥–µ–Ω–∏–µ —Å –≤—ã—Å–æ—Ç—ã"]
    emergency = random.choice(emergencies)
    await update.callback_query.edit_message_text(f"–°—Ä–æ—á–Ω—ã–π –≤—ã–∑–æ–≤: {emergency}. –ë—ã—Å—Ç—Ä–æ —Ä–µ–∞–≥–∏—Ä—É–π—Ç–µ!")

async def handle_surgery(update: Update, context: CallbackContext):
    injuries = ["–ü–µ—Ä–µ–ª–æ–º —Ä—É–∫–∏", "–¢—Ä–∞–≤–º–∞ –≥–æ–ª–æ–≤—ã", "–†–∞–Ω–µ–Ω–∏–µ –≥—Ä—É–¥–Ω–æ–π –∫–ª–µ—Ç–∫–∏"]
    injury = random.choice(injuries)
    await update.callback_query.edit_message_text(f"–¢—Ä–∞–≤–º–∞: {injury}. –û–ø–∏—à–∏—Ç–µ —Å–≤–æ–∏ –¥–µ–π—Å—Ç–≤–∏—è –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è.")

async def start_faction_job(update: Update, context: CallbackContext):
    try:
        query = update.callback_query
        user_id = str(query.from_user.id)
        data = query.data.split('_')

        if len(data) < 4:
            await query.answer("–ù–µ–≤–µ—Ä–Ω—ã–π –∑–∞–ø—Ä–æ—Å.")
            return

        job_id = data[3]
        if user_id not in user_data or 'faction' not in user_data[user_id]:
            await query.answer("–í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤–æ —Ñ—Ä–∞–∫—Ü–∏–∏!")
            return

        user_faction = user_data[user_id]['faction']
        faction_data = factions[user_faction]

        if job_id not in faction_data['jobs']:
            await query.answer("–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
            return

        job = faction_data['jobs'][job_id]
        handler_name = job.get('handler')
        if handler_name and handler_name in globals():
            await globals()[handler_name](update, context)
        else:
            await query.answer("–≠—Ç–æ –∑–∞–¥–∞–Ω–∏–µ –ø–æ–∫–∞ –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç—Å—è.")
    except Exception as e:
        logger.error(f"Error in start_faction_job: {e}")
        await update.callback_query.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

def main():
    application = Application.builder().token(TOKEN).connect_timeout(30.0).read_timeout(30.0).write_timeout(30.0).build()
    
    application.add_handler(CommandHandler("start", start))
    application.add_handler(CommandHandler("stats", stats))
    application.add_handler(CommandHandler('patrol_start', patrol_start))
    application.add_handler(CommandHandler('patrol_end', patrol_end))
    application.add_handler(CommandHandler('border_check', border_check))
    application.add_handler(CommandHandler('inventory_check', inventory_check))
    application.add_handler(CommandHandler('case', case))
    application.add_handler(CommandHandler('emergency', emergency))
    application.add_handler(CallbackQueryHandler(handle_callback))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    application.add_handler(CallbackQueryHandler(start_faction_job, pattern="^start_faction_job_"))
    
    print("Starting bot...")
    application.run_polling(allowed_updates=Update.ALL_TYPES)

if __name__ == '__main__':
    main()
